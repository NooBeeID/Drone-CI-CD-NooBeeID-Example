# kind: pipeline
# type: docker
# name: container-test-and-build

# steps:

# # for unit testing
# - name: tests
#   image: golang
#   environment:
#     DB_HOST: db
#     DB_PORT: 5432
#     DB_USER: noobee
#     DB_PASS: noobee
#     DB_NAME: noobee
#   depends_on:
#     - db
#   commands:
#   - make run-test

# # for build image docker
# - name : build
#   image: plugins/docker
#   settings: 
#     repo: achimonchi/drone-test
#     username:
#       from_secret: docker_username
#     password:
#       from_secret: docker_password
#     tags: latest
#     dockerfile: Multistage-Alpine-Dockerfile
#   when:
#     event:
#     - tag
#     - push
#   depends_on:
#     - tests

# services:
# - name: db
#   image: postgres
#   environment:
#     POSTGRES_PASSWORD: noobee
#     POSTGRES_USER: noobee
#     POSTGRES_DB: noobee

# trigger:
#   branch:
#   - main
#   event:
#   - push
#   - tag

# ---
# kind: pipeline
# type: docker
# name: deploy

# steps:
# - name: deploy to server
#   image: appleboy/drone-ssh
#   settings:
#     host:
#       - ssh_server
#     username: 
#       from_secret: ssh_username
#     password:
#       from_secret: ssh_password
#     port: 22
#     command_timeout: 2m
#     script:
#       - docker run -d --name go-drone-tests --network=host  \
#         -e DB_HOST=localhost \
#         -e DB_PORT=5432 \
#         -e DB_USER=postgres \
#         -e DB_PASS=admin \
#         -e DB_NAME=noobeeid \
#         achimonchi/drone-test
# depends_on:
# - container-test-and-build

# file .drone.yaml

kind: pipeline
type: docker
# pipeline name
name: container-test-and-build

# pipeline steps
steps:
# for unit testing
# unit test yang digunakan adalah Detroit Test
# jadi perlu nge running real database
- name: tests
  # image golang dipilih karena aplikasi yang kita akan build adalah golang apps   
  image: golang
  # environment yang dibutuhkan sama aplikasi golang
  environment:
    DB_HOST: db
    DB_PORT: 5432
    DB_USER: noobee
    DB_PASS: noobee
    DB_NAME: noobee
  # ini akan menunjukkan bahwa step ini akan jalan
  # setelah services/step yang namanya "db" selesai/sedang berjalan
  depends_on:
    - db
  # custom command yang digunakan untuk menjalankan aplikasi
  # biasanya diisi dengan running unit test, atau menjalankan docker run
  commands:
  - make run-test

# for build image docker
- name : build
  image: plugins/docker
  settings: 
    repo: achimonchi/nbid-intermediate-drone
    username:
      from_secret: docker_username
    password:
      from_secret: docker_password
    tags: latest
    dockerfile: Multistage-Alpine-Dockerfile
  when:
    event:
    - tag
    - push
  depends_on:
    - tests


# untuk nge-running services database
services:
  # membuat services databse dengan nama `db`
- name: db
  # menggunakan image postgres, karena DB yang digunakan pada golang apps
  # kita adalah postgres
  image: postgres
  # setup environment variable
  environment:
    POSTGRES_PASSWORD: noobee
    POSTGRES_USER: noobee
    POSTGRES_DB: noobee

# trigger drone saat ada event push pada branch master
# kita bisa setup trigger dengan branch, atau event, atau branch dan event
# pada kasus kali ini, kita menggunakan branch dan event
trigger:
  branch:
  - main
  event:
  - push


# pisah antar pipeline menggunakan garis 3
---
# pipeline CD
kind: pipeline
type: docker
name: deploy

clone:
  disable: true

steps:
# nama step
- name: deploy to server
  # menggunakan image drone-ssh agar bisa melakukan ssh ke server
  image: appleboy/drone-ssh
  # setting drone ssh
  settings:
    host:
      - 103.59.95.233
    username: 
      from_secret: ssh_username
    password:
      from_secret: ssh_password
    port: 22
    command_timeout: 2m
    script:
      - cd app
      - make run-golang-drone-app
      
depends_on:
- container-test-and-build